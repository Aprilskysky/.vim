snippet mod "verilog module" b
module ${1:name}(
	//system signals
	input					${2:clk}			,
	input					${3:rst_n}		,
	${4:io}
);
${0}




endmodule
endsnippet


snippet cnt "counter" b
//$3
always @(posedge ${1:clk} or negedge ${2:rst_n})
begin
	if(!$2)
		${3:cnt} <= ${4:bit}'b0;
	else if(add_$3)begin
		if(end_$3)
			$3 <= $4'b0;
		else
			$3 <= $3+1'b1;
	end
end
assign add_$3 = ${5};
assign end_$3 = ${6};
${0}
endsnippet 


snippet if "sequential always block" b
//$3
always @(posedge ${1:clk} or negedge ${2:rst_n})
begin
	if(!$2)
		${3:variate} <= ${4:bit}'b0;
	else 
		$3 <= ${5};
end
${0}
endsnippet 


snippet ifeif "sequential always block" b
//$3
always @(posedge ${1:clk} or negedge ${2:rst_n})
begin
	if(!$2)
		${3:variate} <= ${4:bit}'b0;
	else if(${5})
		$3 <= ${6};
	else
		$3 <= ${7};
end
${0}
endsnippet 

snippet if* "combined always block" b
//$2
always @(*)
begin
	if($1)
		${2:variate} = ${3};
	else 
		$2 = ${4};
end
${0}
endsnippet


snippet ifeif* "combined always block" b
//$2
always @(*)
begin
	if(!$1)
		${2:variate} = ${3};
	else if(${4}) 
		$2 = ${5};
	else
		$2 = ${6};
end
${0}
endsnippet
 
snippet fsm "fsm" b
//$2
always @(*)
begin
	if(!$1)
		${2:variate} = ${3};
	else if(${4}) 
		$2 = ${5};
	else
		$2 = ${6};
end
${0}
endsnippet
